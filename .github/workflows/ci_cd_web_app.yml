name: CI/CD pipeline for the web applications (API + Frontend)

on:
  push:
    paths-ignore:
      - "src/batch-prediction-pipeline/"
      - "src/feature-pipeline/"
      - "src/training-pipeline"
      - "**/*.yml"
      - "**/*.md"
    branches: ["main"]

jobs:
  integration:
    name: Continuous Integration
    runs-on: ubuntu-lastest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      # TODO: Add linting
      - name: Lint code
        run: echo "Linting repository"

      # TODO: Add unit tests
      - name: Run unit tests
        run: echo "Running unit tests"

  build-and-push-ecr-image:
    name: Continuous Delivery
    needs: integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install Utilities
        run: |
          sudo apt-get update
          sudo apt-get install -y jq unzip
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
          IMAGE_TAG: latest
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Executing SHH command on EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_WEBSERVER_HOST }}
          username: ${{ secrets.EC2_WEBSERVER_USER }}
          key: ${{ secrets.EC2_WEBSERVER_SHH_PRIVATE_KEY }}
          envs:

          script: |

            echo "Stopping the current running container (if exists)..."
            docker stop container_name || true
z
            echo "Removing the previous container..."
            docker rm container_name || true

            echo "Setting AWS credentials..."
            export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
            export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
            export AWS_REGION=${AWS_REGION}

            echo "Loggin into ECR..."
            aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin 817722091681.dkr.ecr.af-south-1.amazonaws.com
            echo "Logged in successfully"

            echo "Pulling docker image from ECR..."
            docker pull \"${{ secrets.AWS_REGISTRY_URL }}/${{ secrets.REPOSITORY_NAME }}:${{ env.TAG }}\

            echo "Running the docker container..."
            docker run -d \
            --name bb_internal_api \
            --env-file  /path/to/dot/env \
            -p ${{ secrets.EXPOSED_PORT }}:${{ secrets.APPLICATION_PORT }} "${{ secrets.AWS_REGISTRY_URL }}/${{ secrets.REPOSITORY_NAME }}:${{ env.TAG }}"
